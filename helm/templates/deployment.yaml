# my-app-chart/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backendDeployment.name }}
  labels:
    app: backend
spec:
  replicas: {{ .Values.backendDeployment.replicas }}
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: {{ .Values.backendDeployment.image }}
          imagePullPolicy: {{ .Values.backendDeployment.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.backendDeployment.containerPort }}
          resources:
            requests:
              cpu: {{ .Values.container.cpuRequest }}  # Initial CPU request for the container
              memory: {{ .Values.container.memoryRequest }}  # Initial memory request for the container
            limits:
              cpu: {{ .Values.container.cpuLimit }}  # Maximum CPU limit for the container
              memory: {{ .Values.container.memoryLimit }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probe.path }}
              port: {{ .Values.probe.port }}
            initialDelaySeconds: {{ .Values.probe.initialDelaySeconds }}
            periodSeconds: {{ .Values.probe.periodSeconds }}
            failureThreshold: {{ .Values.probe.failureThreshold }}
---
# my-app-chart/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontendDeployment.name }}
  labels:
    app: frontend
spec:
  replicas: {{ .Values.frontendDeployment.replicas }}
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: {{ .Values.frontendDeployment.image }}
          imagePullPolicy: {{ .Values.frontendDeployment.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.frontendDeployment.containerPort }}
---
# postgres-chart/templates/postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: {{ .Values.container.image }}
          env:
            - name: POSTGRES_DB
              value: {{ .Values.container.dbName }}
            - name: POSTGRES_USER
              value: {{ .Values.container.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.container.password }}
          ports:
            - containerPort: {{ .Values.container.port }}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-frontend
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80